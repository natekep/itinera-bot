openapi: 3.1.0
info:
  title: Itinera API
  description: API for Itinera - AI-powered conversational travel planner.
  version: 0.1.0

servers:
  - url: https://api.itinera.ai/v1
    description: Production server
  - url: http://localhost:8000/v1
    description: Local development server

tags:
  - name: Users
    description: Endpoints for user management
  - name: Chat
    description: Endpoints for interacting with the AI chatbot
  - name: Itineraries
    description: Endpoints for itinerary generation, retrieval, updates, feedback, explanations, and deletion
  - name: Activities
    description: Endpoints for retrieving activities

paths:

  ##########################################
  # USERS
  ##########################################
  /users:
    post:
      tags: [Users]
      summary: Create a new user
      requestBody:
        description: User registration info
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "201":
          description: User created successfully
        "400":
          description: Invalid input

  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details retrieved
        "404":
          description: User not found
    put:
      tags: [Users]
      summary: Update user details
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user info
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        "200":
          description: User updated successfully
        "400":
          description: Invalid input
        "404":
          description: User not found
    delete:
      tags: [Users]
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: User deleted successfully
        "404":
          description: User not found

  /user/me:
    get:
      tags: [Users]
      summary: Get current user's info
      security: 
        - OAuth2: [openid, email, profile]
      responses:
        "200":
          description: Current user details
          content:
            application/json:
              schema:
                type: object
                properties: 
                  id:
                    type: string
                    example: "123"
                  name:
                    type: string
                    example: "Iram Example"
                  email:
                    type: string
                    example: "iram@example.com"

  ##########################################
  # CHAT
  ##########################################
  /chat:
    post:
      tags: [Chat]
      summary: Create a chat completion
      description: Send a message to the AI chatbot and receive a response.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [messages]
              properties:
                userId:
                  type: string
                  description: Optional user identifier
                messages:
                  type: array
                  description: OpenAI-style chat messages history
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role:
                        type: string
                        enum: [system, user, assistant, tool]
                      content:
                        type: string
                      name:
                        type: string
                        description: Tool name when role=tool
                context:
                  type: object
                  description: Optional app-specific metadata
                temperature:
                  type: number
                  minimum: 0
                  maximum: 2
                  default: 0.5
      responses:
        "200":
          description: Chat completion result (OpenAI-style)
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  object:
                    type: string
                  created:
                    type: integer
                  choices:
                    type: array
                    items:
                      type: object
                      properties:
                        index:
                          type: integer
                        finish_reason:
                          type: string
                          enum: [stop, length, content_filter, tool_calls]
                        message:
                          type: object
                          properties:
                            role:
                              type: string
                              enum: [assistant]
                            content:
                              type: string
                              example: "Hereâ€™s a 2-day itinerary for Vegas..."
                  usage:
                    type: object
                    properties:
                      prompt_tokens: { type: integer }
                      completion_tokens: { type: integer }
                      total_tokens: { type: integer }
        "400":
          description: Invalid input

  /chat/{conversationId}:
    put:
      tags: [Chat]
      summary: Update/replace a conversation state (messages or system context)
      parameters:
        - name: conversationId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                messages:
                  type: array
                  items:
                    type: object
                    required: [role, content]
                    properties:
                      role: { type: string, enum: [system, user, assistant, tool] }
                      content: { type: string }
                      name: { type: string }
                context:
                  type: object
                  description: Metadata to persist
      responses:
        "200":
          description: Conversation state saved
        "400":
          description: Invalid input
    delete:
      tags: [Chat]
      summary: Delete a conversation
      parameters:
        - name: conversationId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Conversation deleted
        "404":
          description: Conversation not found

  ##########################################
  # ITINERARIES
  ##########################################
  /users/{userId}/itineraries:
    post:
      tags: [Itineraries]
      summary: Generate an itinerary based on user preferences
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: User preferences and constraints for itinerary generation
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [destination]
              properties:
                destination:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                budget:
                  type: number
                  format: float
                interests:
                  type: array
                  items:
                    type: string
                constraints:
                  type: object
                  properties:
                    maxTravelTimePerDay:
                      type: string
                      description: e.g., "2h"
                    avoidWeather:
                      type: string
                      description: e.g., "rain"
      responses:
        "200":
          description: Itinerary generated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Itinerary"
        "400":
          description: Invalid input

  /users/{userId}/itineraries/{itineraryId}:
    get:
      tags: [Itineraries]
      summary: Retrieve a saved itinerary
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Saved itinerary retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Itinerary"
        "404":
          description: Itinerary not found
    put:
      tags: [Itineraries]
      summary: Update an existing itinerary
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        description: Updated itinerary details
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Itinerary"
      responses:
        "200":
          description: Itinerary updated
        "400":
          description: Invalid input
    delete:
      tags: [Itineraries]
      summary: Delete an itinerary
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      responses:
        "204":
          description: Itinerary deleted
        "404":
          description: Itinerary not found

  /users/{userId}/itineraries/{itineraryId}/feedback:
    post:
      tags: [Itineraries]
      summary: Submit feedback on an itinerary
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [rating, comment]
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        "201":
          description: Feedback submitted successfully
        "400":
          description: Invalid input

  /users/{userId}/itineraries/{itineraryId}/explanation:
    get:
      tags: [Itineraries]
      summary: Retrieve an explanation of why an itinerary was generated
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Explanation retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  itineraryId:
                    type: string
                  explanation:
                    type: string

  ##########################################
  # ACTIVITIES
  ##########################################
  /users/{userId}/itineraries/{itineraryId}/activities:
    get:
      tags: [Activities]
      summary: Retrieve all activities for a given itinerary
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: List of activities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Activity"
    post:
      tags: [Activities]
      summary: Add a new activity to the itinerary
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Activity"
      responses:
        "201":
          description: Activity added successfully

  /users/{userId}/itineraries/{itineraryId}/activities/{activityId}:
    get:
      tags: [Activities]
      summary: Retrieve details of a specific activity
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
        - name: itineraryId
          in: path
          required: true
          schema: { type: string }
        - name: activityId
          in: path
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Activity details
          content:
            application/j
